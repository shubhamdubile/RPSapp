{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["weapons","App","useState","winner","setWinner","weapon","setWeapon","computer","setComputer","user","setUser","bot","setBot","tie","you","lost","wrong","className","Button","variant","size","onClick","event","preventDefault","Math","floor","random","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2OAIMA,G,MAAU,CAAC,OAAQ,QAAS,aAsHnBC,MApHf,WAAgB,IAAD,EACeC,qBADf,mBACNC,EADM,KACEC,EADF,OAEeF,qBAFf,mBAENG,EAFM,KAEEC,EAFF,OAGmBJ,qBAHnB,mBAGNK,EAHM,KAGIC,EAHJ,OAIWN,mBAAS,GAJpB,mBAINO,EAJM,KAIAC,EAJA,OAKSR,mBAAS,GALlB,mBAKNS,EALM,KAKDC,EALC,OAMSV,mBAAS,sBANlB,mBAMNW,EANM,aAOSX,mBAAS,2BAPlB,mBAONY,EAPM,aAQWZ,mBAAS,yCARpB,mBAQNa,EARM,aASab,mBAAS,oCATtB,mBASNc,EATM,KA0Cb,OA1Ca,KA2CX,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACb,6BACE,8DAEF,yBAAKA,UAAU,cACb,2BAAOA,UAAU,oBACf,4BACE,oCACA,yCAEF,4BACE,4BAAKR,GACL,4BAAKE,MAIX,yBAAKM,UAAU,kBACb,kBAACC,EAAA,EAAD,CACEC,QAAQ,WACRC,KAAK,QACLC,QAAS,kBAAMf,EAAU,UAH3B,QAOA,kBAACY,EAAA,EAAD,CACEC,QAAQ,WACRC,KAAK,QACLC,QAAS,kBAAMf,EAAU,WAH3B,SAOA,kBAACY,EAAA,EAAD,CACEC,QAAQ,WACRC,KAAK,QACLC,QAAS,kBAAMf,EAAU,aAH3B,YAQF,yBAAKW,UAAU,cACb,2BAAOA,UAAU,oBACf,4BACE,2CACA,gDAEF,4BACE,4BAAKZ,GACL,4BAAKE,MAOX,yBAAKU,UAAU,cACb,4BAAKd,IAEP,yBAAKc,UAAU,cACb,6BACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,WAAWC,KAAK,QAAQC,QA5FpC,SAACC,GACbA,EAAMC,iBAENf,EAAYR,EAAQwB,KAAKC,MAAMD,KAAKE,SAAW1B,EAAQ2B,UAExC,OAAXtB,GACFD,EAAUY,GACVR,EAAY,OACHH,IAAWE,EACpBH,EAAUS,GAEE,SAAXR,GAAkC,aAAbE,GACV,aAAXF,GAAsC,UAAbE,GACd,UAAXF,GAAmC,SAAbE,GAEvBH,EAAUU,GACVJ,EAAQD,EAAO,KAEfL,EAAUW,GACVH,EAAOD,EAAM,MAyEP,QAGA,kBAACO,EAAA,EAAD,CAAQC,QAAQ,WAAWC,KAAK,QAAQC,QAzElC,SAACC,GACfA,EAAMC,iBACNnB,EAAU,MACVE,EAAU,MACVE,EAAY,MACZI,EAAO,GACPF,EAAQ,KAmEA,gBCpGQkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.304e5188.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport \"./App.css\";\n\nconst weapons = [\"Rock\", \"Paper\", \"Scissors\"];\n\nfunction App() {\n  const [winner, setWinner] = useState();\n  const [weapon, setWeapon] = useState();\n  const [computer, setComputer] = useState();\n  const [user, setUser] = useState(0);\n  const [bot, setBot] = useState(0);\n  const [tie, setTie] = useState(\"Its Tie Play Again\");\n  const [you, setYou] = useState(\"Congratulation You Won\");\n  const [lost, setLost] = useState(\"Sorry you Lost Better Luck Next Time\");\n  const [wrong, setWrong] = useState(\"Please select Your Choice First\");\n\n  const start = (event) => {\n    event.preventDefault();\n\n    setComputer(weapons[Math.floor(Math.random() * weapons.length)]);\n\n    if (weapon === null) {\n      setWinner(wrong);\n      setComputer(null);\n    } else if (weapon === computer) {\n      setWinner(tie);\n    } else if (\n      (weapon === \"Rock\" && computer === \"Scissors\") ||\n      (weapon === \"Scissors\" && computer === \"Paper\") ||\n      (weapon === \"Paper\" && computer === \"Rock\")\n    ) {\n      setWinner(you);\n      setUser(user + 1);\n    } else {\n      setWinner(lost);\n      setBot(bot + 1);\n    }\n  };\n  const restart = (event) => {\n    event.preventDefault();\n    setWinner(null);\n    setWeapon(null);\n    setComputer(null);\n    setBot(0);\n    setUser(0);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__body\">\n        <div>\n          <h1>Let's Play Rock Paper Scissor</h1>\n        </div>\n        <div className=\"app__score\">\n          <table className=\"app__bordertable\">\n            <tr>\n              <th>User</th>\n              <th>Computer</th>\n            </tr>\n            <tr>\n              <td>{user}</td>\n              <td>{bot}</td>\n            </tr>\n          </table>\n        </div>\n        <div className=\"app__rpsbutton\">\n          <Button\n            variant=\"outlined\"\n            size=\"large\"\n            onClick={() => setWeapon(\"Rock\")}\n          >\n            Rock\n          </Button>\n          <Button\n            variant=\"outlined\"\n            size=\"large\"\n            onClick={() => setWeapon(\"Paper\")}\n          >\n            Paper\n          </Button>\n          <Button\n            variant=\"outlined\"\n            size=\"large\"\n            onClick={() => setWeapon(\"Scissor\")}\n          >\n            Scissor\n          </Button>\n        </div>\n        <div className=\"app__score\">\n          <table className=\"app__bordertable\">\n            <tr>\n              <th>Your Choice</th>\n              <th>Computer Choice</th>\n            </tr>\n            <tr>\n              <td>{weapon}</td>\n              <td>{computer}</td>\n\n              {/* <td>shubham</td>\n              <td>shubham</td> */}\n            </tr>\n          </table>\n        </div>\n        <div className=\"app__score\">\n          <h1>{winner}</h1>\n        </div>\n        <div className=\"app__score\">\n          <div>\n            <Button variant=\"outlined\" size=\"large\" onClick={start}>\n              Play\n            </Button>\n            <Button variant=\"outlined\" size=\"large\" onClick={restart}>\n              Restart\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}